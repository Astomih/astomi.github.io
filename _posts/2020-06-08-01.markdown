---
layout: post
title: std::shared_ptr<T>でthisポインタを渡す
categories: C++
---
# はじめに
以下のコードはデストラクタが二回呼ばれて二重解放してしまいます。
```cpp
#include <memory>
#include <iostream>

class Test
{
public:
  std::shared_ptr<Test> GetPtr(){return std::shared_ptr<Test>(this);}
};

int main()
{
 auto ptr = std::make_shared<Test>();
 auto ptr2 = ptr->GetPtr();
 std::cout << "shared counter:"<< ptr.use_count() << std::endl;
 return 0;
}
```
## 出力
実行環境:gcc 7.4.0
```
shared counter:1
double free or corruption (out)
Aborted (core dumped)
```
#原因と対策
thisポインタをそのまま突っ込んでしまうと、参照カウンタが繰り上がらずにデストラクタが二回呼ばれてしまうのです。詳しい実装は各自で。  
  
ではどうすれば良いかというと、そのためのクラスがstd::shared_ptr<T>とともにC++11で追加されました。それがstd::enable_shared_from_this<T>クラスです。  
これをpublic継承し、thisの代わりにshared_from_this()というメンバ関数を使うことで安全に操作することが可能となります。  
  
以下がstd::enable_shared_from_this<T>を継承して書き直したコードです。  
```cpp
#include <memory>
#include <iostream>

class Test : public std::enable_shared_from_this<Test>
{
public:
  std::shared_ptr<Test> GetPtr(){return shared_from_this();}
};

int main()
{
 auto ptr = std::make_shared<Test>();
 auto ptr2 = ptr->GetPtr();
 std::cout << "shared counter:"<< ptr.use_count() << std::endl;
 return 0;
}
```
出力
```
shared counter:2
```
これでちゃんと参照カウンタが動いてくれます。相違点は、std::enable_shared_from_this<Test>をpublic継承したところと、GetPtr()でshared_from_this()を返している点です。  
#注意点
std::enable_shared_from_this<T>クラスはstd::shared_ptr<T>で管理されているオブジェクトでないと機能しません。  
もしそうでないオブジェクトで使用された場合、C++17以降では例外bad_weak_ptrが投げられます。
#参考

[https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html#gsc.tab=0](https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html#gsc.tab=0)  

[https://cpprefjp.github.io/reference/memory/bad_weak_ptr.html#gsc.tab=0](https://cpprefjp.github.io/reference/memory/bad_weak_ptr.html#gsc.tab=0)



